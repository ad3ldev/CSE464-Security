# -*- coding: utf-8 -*-
"""Copy of assigment 2 security.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1q1V0Fsecs2us8NZWOsN0ZRQYo0CKcnGQ
"""

import wave

def KSA(key):
    key_length = len(key)
    S = list(range(256))
    j = 0
    for i in range(256):
        j = (j + S[i] + key[i % key_length]) % 256
        S[i], S[j] = S[j], S[i]  # Swap
    return S

def PRGA(S):
    i = 0
    j = 0
    while True:
        i = (i + 1) % 256
        j = (j + S[i]) % 256
        S[i], S[j] = S[j], S[i]  # Swap
        K = S[(S[i] + S[j]) % 256]
        yield K

def RC4(key):
    S = KSA(key)
    return PRGA(S)

def encrypt_decrypt(data, key):
    key = [ord(c) for c in key]
    keystream = RC4(key)
    return bytes([data ^ next(keystream) for data in data])

def encrypt_wave_file(input_file, key):
    output_file = input_file.split('.')[0] + "_encrypted.wav"
    with wave.open(input_file, 'rb') as wav_in:
        params = wav_in.getparams()
        frames = wav_in.readframes(params.nframes)
        encrypted_frames = encrypt_decrypt(frames, key)
        with wave.open(output_file, 'wb') as wav_out:
            wav_out.setparams(params)
            wav_out.writeframes(encrypted_frames)
    return output_file

def decrypt_wave_file(input_file, key):
    output_file = input_file.split('.')[0] + "_decrypted.wav"
    with wave.open(input_file, 'rb') as wav_in:
        params = wav_in.getparams()
        frames = wav_in.readframes(params.nframes)
        decrypted_frames = encrypt_decrypt(frames, key)
        with wave.open(output_file, 'wb') as wav_out:
            wav_out.setparams(params)
            wav_out.writeframes(decrypted_frames)
    return output_file

input_wave_file = "StarWars60.wav"
key = input("Enter a 16-character ASCII key: ")[:16]  # Take first 16 characters
encrypted_wave_file = encrypt_wave_file(input_wave_file, key)
decrypted_wave_file = decrypt_wave_file(encrypted_wave_file, key)
print("Encryption and decryption completed.")